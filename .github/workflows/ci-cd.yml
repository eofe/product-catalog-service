name: Build, Push & Deploy Product Catalog Service

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      
      DOCKER_IMAGE: ${{ vars.DOCKER_NAMESPACE }}/product-catalog-service:latest
      
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t "$DOCKER_IMAGE" .

      - name: Push Docker image to Docker Hub
        run: docker push "$DOCKER_IMAGE"
        
      - name: Configure AWS credentials
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Force new deployment (pull latest image)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment \
            --region "${{ secrets.AWS_REGION }}"

      - name: Wait for service to stabilize
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          aws ecs wait services-stable \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "${{ secrets.AWS_REGION }}"
